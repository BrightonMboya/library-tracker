generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model LibraryInfo {
    name                         String   @unique
    yearOfEstablishment          String
    email                        String
    phoneNumber                  String
    website                      String
    latitude                     String
    longitude                    String
    country                      String
    State                        String
    adress                       String
    extract                      String
    openingTime                  String
    closingTime                  String
    numberOfProffesionalStaff    String
    numberOfUnproffessionalStaff String
    numberOfUsers                String
    numberOfComputerSets         String
    numberOfELibrariesPlartform  String
    readingSpaceCapacity         String
    numberOfReadingTablets       String
    numberOfBooks                String
    numberOfJournals             String
    eventsTitle                  String
    eventExtract                 String
    monthOfTheEvent              String
    SRHRInfoServices             String
    disablePersonUseLibrary      String
    internetFacilities           String
    printAndCopyAccess           String
    registrationCostPerMonth     String
    registrationCostPerYear      String
    id                           String   @id @default(cuid())
    libraryType                  String
    approved                     Boolean  @default(false)
    createdAt                    DateTime @default(now())
}

model AdminInfo {
    id              String @id @default(cuid())
    fullName        String
    email           String
    phoneNumber     String
    country         String
    state           String
    adress          String
    passportUrl     String
    identityCardUrl String
}
